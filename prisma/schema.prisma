generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  role          UserRole @default(USER)
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  //relations
  sessions         Session[]
  accounts         Account[]
  jobseekerProfile Jobseeker?
  companyProfile   Company?

  @@map("users")
}

model Jobseeker {
  id             String   @id @default(uuid())
  userId         String   @unique
  fullName       String
  email          String?
  profilePicture String?
  phone          String?
  location       String?
  website        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  //relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("jobseekers")
}

model Company {
  id          String   @id @default(uuid())
  userId      String   @unique
  companyName String
  companyLogo String?
  industry    String
  website     String?
  location    String?
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  //relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs Job[]

  @@map("companies")
}

model Job {
  id                  String     @id @default(uuid())
  companyId           String
  title               String
  description         String
  location            String
  salary              String?
  benefits            String?
  experience          Experience
  jobType             JobType
  workFrom            WorkFrom
  urgent              Boolean?
  applicationDeadline DateTime?
  contactEmail        String?
  contactPhone        String?
  workingHours        String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("jobs")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("accounts")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verifications")
}

enum JobType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
}

enum Experience {
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
}

enum WorkFrom {
  REMOTE
  ON_SITE
  HYBRID
}

enum UserRole {
  COMPANY
  USER
}
